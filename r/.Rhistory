install.packages("astsa")
install.packages("astsa")
EM0
library(astsa)
EM0
Ksmooth0
library(nlme)   # loads package nlme
# Generate data (same as Example 6.6)
set.seed(999); num = 100; N = num+1
x = arima.sim(n=N, list(ar = .8, sd=1))
y = ts(x[-1] + rnorm(num,0,1))
# Initial Estimates
u = ts.intersect(y,lag(y,-1),lag(y,-2))
varu = var(u); coru = cor(u)
phi = coru[1,3]/coru[1,2]
q = (1-phi^2)*varu[1,2]/phi
r = varu[1,1] - q/(1-phi^2)
cr = sqrt(r); cq = sqrt(q); mu0 = 0; Sigma0 = 2.8
(em = EM0(num, y, 1, mu0, Sigma0, phi, cq, cr, 75, .00001))
# Standard Errors  (this uses nlme)
phi = em$Phi; cq = chol(em$Q); cr = chol(em$R)
mu0 = em$mu0; Sigma0 = em$Sigma0
para = c(phi, cq, cr)
# Evaluate likelihood at estimates
Linn=function(para){
kf = Kfilter0(num, y, 1, mu0, Sigma0, para[1], para[2], para[3])
return(kf$like)
}
emhess = fdHess(para, function(para) Linn(para))
SE = sqrt(diag(solve(emhess$Hessian)))
# Display summary of estimation
estimate = c(para, em$mu0, em$Sigma0); SE = c(SE,NA,NA)
u = cbind(estimate, SE)
rownames(u) = c("phi","sigw","sigv","mu0","Sigma0")
u
EM0
Ksmooth0
Kfilter0
EM0
library(R.matlab)
install.packages("R.matlab")
library(R.matlab)
getwd()
data = readMat("Desktop/obs.mat")
data
obs = data$obs
obs
num = 150
T = 150
H = [[0,1,0]]
array(c(0,1,0), dim=c(1,3))
H = array(c(0,1,0), dim=c(1,3))
xb = c(1,1,1)
eye(2)
diag(c(1,1,1))
B = diag(c(1,1,1))
M = c( 0.9950,-0.0993,    0.0100,
0.0998,    0.9900,   -0.0993,
0,    0.0998,    0.9950)
M
M = array(M, c(3,3))
M
M = c( 0.9950,-0.0993,    0.0100,
0.0998,    0.9900,   -0.0993,
0,    0.0998,    0.9950)
?array
M = c( 0.9950,-0.0993,    0.0100,
0.0998,    0.9900,   -0.0993,
0,    0.0998,    0.9950)
M = array(M, c(3,3))
M = t(M)
M
Q = 0.01*diag(c(1,1,1))
Q
sqQ = chol(Q)
R = 01
R = 0.1
sqR = chol(R)
R
sqR
EM0(T,obs,H,xb,B,M,sqQ,sqR)
library(nlme)   # loads package nlme
# Generate data (same as Example 6.6)
set.seed(999); num = 100; N = num+1
x = arima.sim(n=N, list(ar = .8, sd=1))
y = ts(x[-1] + rnorm(num,0,1))
# Initial Estimates
u = ts.intersect(y,lag(y,-1),lag(y,-2))
varu = var(u); coru = cor(u)
phi = coru[1,3]/coru[1,2]
q = (1-phi^2)*varu[1,2]/phi
r = varu[1,1] - q/(1-phi^2)
cr = sqrt(r); cq = sqrt(q); mu0 = 0; Sigma0 = 2.8
num
T
y
H
mu0
xb
Sigma0
phi
cq
cr
EM0(T,obs,H,xb,B,M,sqQ,sqR)
EM0
Ksmooth0
M
y
H
EM0(T,obs,H,xb,B,M,sqQ,sqR)
EM0
Ksmooth
Ksmooth0
Kfilter0
EM0(T,obs,H,xb,B,M,sqQ,sqR)
obs
xb
xb = array(xb,c(3,1))
xb
EM0(T,obs,H,xb,B,M,sqQ,sqR)
H
R
R = array(R,c(1,1))
R
EM0(T,obs,H,xb,B,M,sqQ,sqR)
nrow(Phi)
nrow(M)
pdim = nrow(M)
P00 = as.matrix(B,nrow=pdim,ncol=pdim)
P00
Pp = M %*% P00 %*% t(M) + Q
Pp
sigtemp = H %*% Pp %*% t(H) + R
sigtemp
sig = (t(sigtemp) +sigtemp)/2
sig
solve(sig)
Kfilter0 = function (num, y, A, mu0, Sigma0, Phi, cQ, cR)
{
Q = t(cQ) %*% cQ
R = t(cR) %*% cR
Phi = as.matrix(Phi)
pdim = nrow(Phi)
y = as.matrix(y)
qdim = ncol(y)
xp = array(NA, dim = c(pdim, 1, num))
Pp = array(NA, dim = c(pdim, pdim, num))
xf = array(NA, dim = c(pdim, 1, num))
Pf = array(NA, dim = c(pdim, pdim, num))
innov = array(NA, dim = c(qdim, 1, num))
sig = array(NA, dim = c(qdim, qdim, num))
x00 = as.matrix(mu0, nrow = pdim, ncol = 1)
P00 = as.matrix(Sigma0, nrow = pdim, ncol = pdim)
xp[, , 1] = Phi %*% x00
Pp[, , 1] = Phi %*% P00 %*% t(Phi) + Q
sigtemp = A %*% Pp[, , 1] %*% t(A) + R
sig[, , 1] = (t(sigtemp) + sigtemp)/2
siginv = solve(sig[, , 1])
K = Pp[, , 1] %*% t(A) %*% siginv
innov[, , 1] = y[1, ] - A %*% xp[, , 1]
xf[, , 1] = xp[, , 1] + K %*% innov[, , 1]
Pf[, , 1] = Pp[, , 1] - K %*% A %*% Pp[, , 1]
sigmat = as.matrix(sig[, , 1], nrow = qdim, ncol = qdim)
like = log(det(sigmat)) + t(innov[, , 1]) %*% siginv %*%
innov[, , 1]
for (i in 2:num) {
if (num < 2)
break
xp[, , i] = Phi %*% xf[, , i - 1]
Pp[, , i] = Phi %*% Pf[, , i - 1] %*% t(Phi) + Q
sigtemp = A %*% Pp[, , i] %*% t(A) + R
sig[, , i] = (t(sigtemp) + sigtemp)/2
siginv = solve(sig[, , i])
K = Pp[, , i] %*% t(A) %*% siginv
innov[, , i] = y[i, ] - A %*% xp[, , i]
xf[, , i] = xp[, , i] + K %*% innov[, , i]
Pf[, , i] = Pp[, , i] - K %*% A %*% Pp[, , i]
sigmat = as.matrix(sig[, , i], nrow = qdim, ncol = qdim)
like = like + log(det(sigmat)) + t(innov[, , i]) %*%
siginv %*% innov[, , i]
}
like = 0.5 * like
list(xp = xp, Pp = Pp, xf = xf, Pf = Pf, like = like, innov = innov,
sig = sig, Kn = K)
}
Kfilter0 = function (num, y, A, mu0, Sigma0, Phi, cQ, cR)
{
Q = t(cQ) %*% cQ
R = t(cR) %*% cR
Phi = as.matrix(Phi)
pdim = nrow(Phi)
y = as.matrix(y)
qdim = ncol(y)
xp = array(NA, dim = c(pdim, 1, num))
Pp = array(NA, dim = c(pdim, pdim, num))
xf = array(NA, dim = c(pdim, 1, num))
Pf = array(NA, dim = c(pdim, pdim, num))
innov = array(NA, dim = c(qdim, 1, num))
sig = array(NA, dim = c(qdim, qdim, num))
x00 = as.matrix(mu0, nrow = pdim, ncol = 1)
P00 = as.matrix(Sigma0, nrow = pdim, ncol = pdim)
xp[, , 1] = Phi %*% x00
Pp[, , 1] = Phi %*% P00 %*% t(Phi) + Q
sigtemp = A %*% Pp[, , 1] %*% t(A) + R
sig[, , 1] = (t(sigtemp) + sigtemp)/2
cat(sig[, , 1])
siginv = solve(sig[, , 1])
K = Pp[, , 1] %*% t(A) %*% siginv
innov[, , 1] = y[1, ] - A %*% xp[, , 1]
xf[, , 1] = xp[, , 1] + K %*% innov[, , 1]
Pf[, , 1] = Pp[, , 1] - K %*% A %*% Pp[, , 1]
sigmat = as.matrix(sig[, , 1], nrow = qdim, ncol = qdim)
like = log(det(sigmat)) + t(innov[, , 1]) %*% siginv %*%
innov[, , 1]
for (i in 2:num) {
if (num < 2)
break
xp[, , i] = Phi %*% xf[, , i - 1]
Pp[, , i] = Phi %*% Pf[, , i - 1] %*% t(Phi) + Q
sigtemp = A %*% Pp[, , i] %*% t(A) + R
sig[, , i] = (t(sigtemp) + sigtemp)/2
siginv = solve(sig[, , i])
K = Pp[, , i] %*% t(A) %*% siginv
innov[, , i] = y[i, ] - A %*% xp[, , i]
xf[, , i] = xp[, , i] + K %*% innov[, , i]
Pf[, , i] = Pp[, , i] - K %*% A %*% Pp[, , i]
sigmat = as.matrix(sig[, , i], nrow = qdim, ncol = qdim)
like = like + log(det(sigmat)) + t(innov[, , i]) %*%
siginv %*% innov[, , i]
}
like = 0.5 * like
list(xp = xp, Pp = Pp, xf = xf, Pf = Pf, like = like, innov = innov,
sig = sig, Kn = K)
}
EM0(T,obs,H,xb,B,M,sqQ,sqR)
myFilt = function (num, y, A, mu0, Sigma0, Phi, cQ, cR)
{
Q = t(cQ) %*% cQ
R = t(cR) %*% cR
Phi = as.matrix(Phi)
pdim = nrow(Phi)
y = as.matrix(y)
qdim = ncol(y)
xp = array(NA, dim = c(pdim, 1, num))
Pp = array(NA, dim = c(pdim, pdim, num))
xf = array(NA, dim = c(pdim, 1, num))
Pf = array(NA, dim = c(pdim, pdim, num))
innov = array(NA, dim = c(qdim, 1, num))
sig = array(NA, dim = c(qdim, qdim, num))
x00 = as.matrix(mu0, nrow = pdim, ncol = 1)
P00 = as.matrix(Sigma0, nrow = pdim, ncol = pdim)
xp[, , 1] = Phi %*% x00
Pp[, , 1] = Phi %*% P00 %*% t(Phi) + Q
sigtemp = A %*% Pp[, , 1] %*% t(A) + R
sig[, , 1] = (t(sigtemp) + sigtemp)/2
cat(sig[, , 1])
siginv = solve(sig[, , 1])
K = Pp[, , 1] %*% t(A) %*% siginv
innov[, , 1] = y[1, ] - A %*% xp[, , 1]
xf[, , 1] = xp[, , 1] + K %*% innov[, , 1]
Pf[, , 1] = Pp[, , 1] - K %*% A %*% Pp[, , 1]
sigmat = as.matrix(sig[, , 1], nrow = qdim, ncol = qdim)
like = log(det(sigmat)) + t(innov[, , 1]) %*% siginv %*%
innov[, , 1]
for (i in 2:num) {
if (num < 2)
break
xp[, , i] = Phi %*% xf[, , i - 1]
Pp[, , i] = Phi %*% Pf[, , i - 1] %*% t(Phi) + Q
sigtemp = A %*% Pp[, , i] %*% t(A) + R
sig[, , i] = (t(sigtemp) + sigtemp)/2
siginv = solve(sig[, , i])
K = Pp[, , i] %*% t(A) %*% siginv
innov[, , i] = y[i, ] - A %*% xp[, , i]
xf[, , i] = xp[, , i] + K %*% innov[, , i]
Pf[, , i] = Pp[, , i] - K %*% A %*% Pp[, , i]
sigmat = as.matrix(sig[, , i], nrow = qdim, ncol = qdim)
like = like + log(det(sigmat)) + t(innov[, , i]) %*%
siginv %*% innov[, , i]
}
like = 0.5 * like
list(xp = xp, Pp = Pp, xf = xf, Pf = Pf, like = like, innov = innov,
sig = sig, Kn = K)
}
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
siginv
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
sig
solve(sig[,,1])
solve(sig[1])
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
Kfilter0 = function (num, y, A, mu0, Sigma0, Phi, cQ, cR)
{
Q = t(cQ) %*% cQ
R = t(cR) %*% cR
Phi = as.matrix(Phi)
pdim = nrow(Phi)
y = as.matrix(y)
qdim = ncol(y)
xp = array(NA, dim = c(pdim, 1, num))
Pp = array(NA, dim = c(pdim, pdim, num))
xf = array(NA, dim = c(pdim, 1, num))
Pf = array(NA, dim = c(pdim, pdim, num))
innov = array(NA, dim = c(qdim, 1, num))
sig = array(NA, dim = c(qdim, qdim, num))
x00 = as.matrix(mu0, nrow = pdim, ncol = 1)
P00 = as.matrix(Sigma0, nrow = pdim, ncol = pdim)
xp[, , 1] = Phi %*% x00
Pp[, , 1] = Phi %*% P00 %*% t(Phi) + Q
sigtemp = A %*% Pp[, , 1] %*% t(A) + R
sig[, , 1] = (t(sigtemp) + sigtemp)/2
siginv = solve(sig[, , 1])
K = Pp[, , 1] %*% t(A) %*% siginv
innov[, , 1] = y[1, ] - A %*% xp[, , 1]
xf[, , 1] = xp[, , 1] + K %*% innov[, , 1]
Pf[, , 1] = Pp[, , 1] - K %*% A %*% Pp[, , 1]
sigmat = as.matrix(sig[, , 1], nrow = qdim, ncol = qdim)
like = log(det(sigmat)) + t(innov[, , 1]) %*% siginv %*%
innov[, , 1]
for (i in 2:num) {
if (num < 2)
break
xp[, , i] = Phi %*% xf[, , i - 1]
Pp[, , i] = Phi %*% Pf[, , i - 1] %*% t(Phi) + Q
sigtemp = A %*% Pp[, , i] %*% t(A) + R
sig[, , i] = (t(sigtemp) + sigtemp)/2
siginv = solve(sig[, , i])
K = Pp[, , i] %*% t(A) %*% siginv
innov[, , i] = y[i, ] - A %*% xp[, , i]
xf[, , i] = xp[, , i] + K %*% innov[, , i]
Pf[, , i] = Pp[, , i] - K %*% A %*% Pp[, , i]
sigmat = as.matrix(sig[, , i], nrow = qdim, ncol = qdim)
like = like + log(det(sigmat)) + t(innov[, , i]) %*%
siginv %*% innov[, , i]
}
like = 0.5 * like
list(xp = xp, Pp = Pp, xf = xf, Pf = Pf, like = like, innov = innov,
sig = sig, Kn = K)
}
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
obs
cR = sqR
xp
Q = t(cQ) %*% cQ
R = t(cR) %*% cR
Phi = as.matrix(Phi)
pdim = nrow(Phi)
y = as.matrix(y)
source('~/.active-rstudio-document')
source('~/Desktop/EM.R')
sig
sig[,,1]
qdim
ncol(y)
ncol(t(y)
)
source('~/.active-rstudio-document')
xp
obs = t(obs)
Kfilter0(150,obs,H,xb,B,M,sqQ,sqR)
EM0(T,obs,H,xb,B,M,sqQ,sqR)
source('~/Desktop/EM.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
res$like
plot(res$like)
res
source('~/Desktop/EM.R')
source('~/.active-rstudio-document')
EM0
Ksmooth0
Kfilter0
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
res
res$Pp
res$Pp
res$Pp(,,1)
res$Pp[,,1]
res$Pp[,,0]
res$Pp[,,1]
res$Pp[,,2]
res$Pf[,,1]
res$Pf[,,2]
res$xp[,,1]
res$Pp[,,1]
res$xf[,,1]
res$sig
res$sig[,,1]
res$innov[,,1]
Kfilter0
source('~/.active-rstudio-document')
debugSource('~/Desktop/testing_filter.R')
K
t(A)
Pp[, , 1]
siginv
sig[, , 1]
sigtemp
R
source('~/Desktop/testing_filter.R')
EM0(T,obs,H,xb,B,M,sqQ,sqR)
EM0(T,obs,H,xb,B,M,sqQ,sqR)
EM0(T,obs,H,xb,B,M,sqQ,sqR)
loglik
source('~/.active-rstudio-document')
res
R
source('~/Desktop/testing_filter.R')
res$Kn
R
Pf(,,150)
res$Pf(,,150)
res$Pf[,,150]
res$xp(,,1)
res$xp[,,1]
debugSource('~/Desktop/testing_filter.R')
xp[, , 1]
Phi
res$Kn
res$xp[,,1]
res$xp[,,2]
res$xp[,,10]
res$xp[,,100]
res$xp[,,150]
res$xf[,,150]
res$like
debugSource('~/Desktop/testing_filter.R')
res$like
source('~/Desktop/testing_filter.R')
res$like
source('~/Desktop/testing_filter.R')
EM0(T,obs,H,xb,B,M,sqQ,sqR)
R
EM0(T,obs,H,xb,B,M,sqQ,sqR)
obs
M
sin(0.1)
source('~/.active-rstudio-document')
M
obs
source('~/Desktop/testing_filter.R')
obs
source('~/Desktop/testing_filter.R')
source('~/Desktop/testing_filter.R')
source('~/Desktop/testing_filter.R')
EM0
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
EM0
source('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
ks
ks$xs
ks$xs[,,1]
ks$like
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
source('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
R
xb
mu0
Sigma0
Sigma0
Q
debugSource('~/Desktop/testing_filter.R')
debugSource('~/Desktop/testing_filter.R')
View(Q)
R
M
Phi
R
View(Q)
Sigma0
ks$x0n
ks$P0n
ks$Ps(,,1)
ks$Ps[,,1]
ks$x0n
Ksmooth0
debugSource('~/Desktop/testing_filter.R')
source('~/Desktop/testing_filter.R')
source('~/Desktop/testing_filter.R')
setwd("~/Dropbox/repos/npz/r")
library(raster)
raster('Users/denis/Dropbox/data/chl_seawifs_daily/S1999330.L3m_DAY_CHL_chlor_a_9km')
library(RPostgreSQL)
m <- dbDriver('PostgreSQL')
con <- dbConnect(m, user='postgre', db='dd')
con <- dbConnect(m, user='postgre', dbname='dd')
con <- dbConnect(m, user='postgres', dbname='dd')
raster('Users/denis/Dropbox/data/chl_seawifs_daily/S1999330.L3m_DAY_CHL_chlor_a_9km')
raster('/Users/denis/Dropbox/data/chl_seawifs_daily/S1997305.h5')
myraster <- raster('/Users/denis/Dropbox/data/chl_seawifs_daily/S1997305.h5')
library(rasterVis)
levelplot(myraster)
